#!/bin/bash

source ./util/common-functions.sh

# Load environment variables from .env file if it exists
if [ -f .env ]; then
  set -o allexport
  source .env
  set +o allexport
fi

# Build the Docker image
build_docker_image() {
  print_header "Building Docker image"
  docker build --build-arg TERRAFORM_VERSION="${TERRAFORM_VERSION}" \
               --build-arg KIND_VERSION="${KIND_VERSION}" \
               --build-arg KUBECTL_VERSION="${KUBECTL_VERSION}" \
               --build-arg HELM_VERSION="${HELM_VERSION}" \
               -t "${IMAGE_NAME}" . && print_success "Docker image built."
}

# Run the Docker container and keep it running
run_docker_container() {
  print_header "Running Docker container"
  docker run -d --privileged --name "${CONTAINER_NAME}" --network host -v /var/run/docker.sock:/var/run/docker.sock -v "$(pwd)":/workspace "${IMAGE_NAME}" sleep infinity && print_success "Docker container running."
}

# Execute a command inside the Docker container
exec_in_container() {
  local command=$1
  docker exec -it "${CONTAINER_NAME}" /bin/bash -c "
    cd /workspace
    if [ -f .env ]; then
      set -o allexport
      source .env
      set +o allexport
    fi
    ${command}
  "
}

# Function to create KinD cluster inside the Docker container using Terraform
create_kind_cluster() {
  print_header "Creating KinD cluster"
  exec_in_container "cd /workspace/terraform && terraform init && terraform apply -auto-approve" && print_success "KinD cluster created."
}

# Function to deploy Kubernetes manifests using kubectl inside the Docker container
deploy_kubernetes_manifests() {
  print_header "Deploying Kubernetes manifests"
  exec_in_container "cd /workspace/k8s-manifests && ./deploy_manifests.sh"
}

# Check if Kubernetes API server is accessible
check_k8s_api_server() {
  print_header "Checking if Kubernetes API server is accessible"
  exec_in_container "kubectl cluster-info" && print_success "Kubernetes API server is accessible."
}

# Function to stop the Docker container
stop_docker_container() {
  print_header "Stopping Docker container"
  docker stop "${CONTAINER_NAME}" && print_success "Docker container stopped."
}

# Remove the Docker container and image, and clean up Terraform resources
cleanup_resources() {
  print_header "Destroying Terraform resources"
  exec_in_container "cd /workspace/terraform && terraform destroy -auto-approve && rm -rf .terraform terraform.tfstate* .terraform.lock.hcl" && print_success "Terraform resources destroyed."

  print_header "Stopping and removing Docker container"
  docker rm -f "${CONTAINER_NAME}" && print_success "Docker container removed."

  print_header "Removing Docker image"
  docker rmi -f "${IMAGE_NAME}" && print_success "Docker image removed."

  print_header "Removing KinD node images"
  KIND_IMAGES=$(docker images | grep 'kindest/' | awk '{print $3}')
  if [ -z "$KIND_IMAGES" ]; then
    print_success "No KinD node images found."
  else
    echo "$KIND_IMAGES" | xargs -r docker rmi -f && print_success "KinD node images removed."
  fi

  print_header "Listing all Docker images after cleanup"
  docker images
}

# Access the running Docker container interactively
access_container() {
  print_header "Accessing Docker container interactively"
  docker exec -it "${CONTAINER_NAME}" /bin/bash -c "
      cd /workspace
      if [ -f .env ]; then
        set -o allexport
        source .env
        set +o allexport
      fi
      exec /bin/bash
    "
}

# Function to generate the metrics report inside the Docker container
generate_metrics_report() {
  exec_in_container "DURATION=${PROMETHEUS_QUERY_DURATION} STEP=${PROMETHEUS_QUERY_STEP} /workspace/util/metrics_script"
}

# Function to run benchmarks using Artillery
# Function to run benchmarks using Artillery
run_benchmarks() {
  exec_in_container "BENCHMARK_WARMUP_DURATION=${BENCHMARK_WARMUP_DURATION} BENCHMARK_WARMUP_ARRIVAL_RATE=${BENCHMARK_WARMUP_ARRIVAL_RATE} BENCHMARK_WARMUP_RAMP_UP_TO=${BENCHMARK_WARMUP_RAMP_UP_TO} BENCHMARK_SUSTAINED_DURATION=${BENCHMARK_SUSTAINED_DURATION} BENCHMARK_SUSTAINED_ARRIVAL_RATE=${BENCHMARK_SUSTAINED_ARRIVAL_RATE} /workspace/util/run_benchmarks $1"
}

# Display usage information
usage() {
  echo "Usage: $0 {setup|docker <docker-command>|terraform <terraform-command>|kind <kind-command>|kubectl <kubectl-command>|apply|stop|cleanup|access|generate-metrics-report <script-name>|benchmark [scenario]}"
  echo
  echo "Commands:"
  echo "  setup                       Build the Docker image, run the container, set up the KinD cluster, and deploy Kubernetes manifests"
  echo "  docker <docker-command>     Run a Docker command inside the container"
  echo "  terraform <terraform-command> Run a Terraform command inside the container"
  echo "  kind <kind-command>         Run a KinD command inside the container"
  echo "  kubectl <kubectl-command>   Run a kubectl command inside the container"
  echo "  apply                       Apply the Terraform configuration to create the KinD cluster"
  echo "  stop                        Stop the running Docker container"
  echo "  cleanup                     Destroy Terraform resources, stop and remove the Docker container, and remove the Docker image"
  echo "  access                      Access the running Docker container interactively"
  echo "  generate-metrics-report     Run the metrics script inside the Docker container"
  echo "  benchmark [scenario]        Run benchmarking tests with Artillery. If scenario is provided, only that scenario is run."
  echo
  echo "Examples:"
  echo "  $0 setup"
  echo "  $0 docker ps"
  echo "  $0 terraform init"
  echo "  $0 kind create cluster"
  echo "  $0 kubectl get pods"
  echo "  $0 apply"
  echo "  $0 stop"
  echo "  $0 cleanup"
  echo "  $0 access"
  echo "  $0 generate-metrics-report"
  echo "  $0 benchmark"
  echo "  $0 benchmark \"Test foo endpoint\""
}

# Main entry point
main() {
  case $1 in
    setup)
      build_docker_image
      run_docker_container
      create_kind_cluster
      check_k8s_api_server
      deploy_kubernetes_manifests
      ;;
    docker)
      shift
      exec_in_container "docker $*"
      ;;
    terraform)
      shift
      exec_in_container "cd /workspace/terraform && terraform $*"
      ;;
    kind)
      shift
      exec_in_container "kind $*"
      ;;
    kubectl)
      shift
      exec_in_container "kubectl $*"
      ;;
    apply)
      exec_in_container "cd /workspace/terraform && terraform init && terraform apply -auto-approve"
      ;;
    stop)
      stop_docker_container
      ;;
    cleanup)
      cleanup_resources
      ;;
    access)
      access_container
      ;;
    generate-metrics-report)
      shift
      generate_metrics_report
      ;;
    benchmark)
      shift
      run_benchmarks "$1"
      ;;
    *)
      usage
      exit 1
      ;;
  esac
}

# Run the main entry point
main "$@"
